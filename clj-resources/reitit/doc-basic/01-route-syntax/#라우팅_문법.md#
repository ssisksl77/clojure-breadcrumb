# Route Syntax

[Link](https://cljdoc.org/d/metosin/reitit/0.5.6/doc/basics/route-syntax)

Routes are defined as vectors of String path and optional (non-sequential) route argument child routes.

Paths can have path-parameters (`:id`) or catch-all-parameters (`*path`).

Parameters can also be wrapped in brackets, enabling use of qualified keywords {user/id}, {*user/path}

## Example

라우트 하나
```
	["ping"]	
```

라우트 둘
```
[["/ping" ::ping]
 ["/pong" {:name ::pong}]]
```

패스 변수
```
[["/users/:user-id"]
 ["/api/:version/ping"]]
```

```
[["/users/{user-id}"]
 ["/files/file-{number}.pdf"]]
```

Nested routes:
```
["/api"
 ["/admin" {:middleware [::admin]}
  ["" ::admin]
  ["/db" ::db]]
 ["/ping" ::ping]]
```

위랑 동일하지만 한 줄짜리로
```
[["/api/admin" {:middleware [::admin], :name ::admin}]
 ["/api/admin/db" {:middleware [::admin], :name ::db}]
 ["/api/ping" {:name ::ping}]]
```

## Encoding

Reitit does not apply any encoding to your paths. If you need that, you must encode them yourself. 
`E.g., /foo bar should be /foo%20bar`.
Reitit은 직접해라 

## Wildcards

Normal path-parameters (`:id`) can start anywhere in the path string, 
but have to end either to slash `/` (currently hardcoded) or to an end of path string

## Generating routes

Routes are just data, so it's easy to create them programmatically:
라우트도 단지 데이터일 뿐,

```
(defn cqrs-routes [actions]
  ["/api" {:interceptors [::api ::db]}
   (for [[type interceptor] actions
         :let [path (str "/" (name interceptor))
               method (case type
                        :query :get
                        :command :post)]]
     [path {method {:interceptors [interceptor]}}])])
 ```
 
 ```
 (cqrs-routes
  [[:query   'get-user]
   [:command 'add-user]
   [:command 'add-order]])
; ["/api" {:interceptors [::api ::db]}
;  (["/get-user" {:get {:interceptors [get-user]}}]
;   ["/add-user" {:post {:interceptors [add-user]}}]
;   ["/add-order" {:post {:interceptors [add-order]}}])]
```